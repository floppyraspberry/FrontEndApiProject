# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

variables:
- name: 'buildConfiguration'
  value: 'Release'
- name: 'buildPlatform'
  value: 'Any CPU'
- name: 'solution'
  value: '**/*.sln'

parameters:
- name: dockerBuildContext
  default: "$(System.DefaultWorkingDirectory)"
- name: dockerFile
  default: "**/Dockerfile"
- name: injectTokenArgName
  type: string
  default: PAT
- name: dockerImageName                              
  default: $(Build.BuildId)

trigger:
  batch: true
  branches:
    include:
    - feature/*
    exclude:
    - master

resources:
  repositories:
    - repository: templates
      type: git
      name: devops-templates-pipelines
pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'
  demands:
  - msbuild
  - visualstudio
  - DotNetFramework

stages:
  - stage: Build
    jobs:
      - job: Build
        displayName: "Docker Build"
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk'
            inputs:
              packageType: sdk
              version: 3.1.402

          - task: Docker@2
            displayName: "Build container"
            inputs:
              command: build
              dockerFile: ${{ parameters.dockerFile }}
              buildContext: ${{ parameters.dockerBuildContext }}
              arguments: --tag ${{ parameters.dockerImageName }}:$(Build.BuildId) --build-arg ${{ parameters.injectTokenArgName }}=$(System.AccessToken)

          - task: Docker@0
            displayName: 'Save docker image'
            inputs:
              action: 'Run a Docker command'
              customCommand: 'image save ${{ parameters.dockerImageName }}:$(Build.BuildId) -o $(Build.ArtifactStagingDirectory)/${{ parameters.dockerImageName }}.tar'
          - publish: $(Build.ArtifactStagingDirectory)
            displayName: Publish Registry Artifact
            artifact: "${{ parameters.dockerImageName }}-images"
  - stage: Run
    jobs:
      #- job: Test
      #  displayName: "Validate vars"
      #  steps:
      #    - bash: |
      #        echo "echo $TEST" $TEST
      #        echo "echo $($TEST)" $($Test)
      #        echo "echo $(variables.test)" $(variables.test)
      #        echo ${testA}
      #        echo ${testB}
      #        echo ${TESTB}
      #        echo ${testC}
      #        echo ${TESTC}
      #        echo ${testA}
      #        echo ${TESTA}
      #        echo ($Test)
      #        echo ($Test)

      - job: Run
        displayName: "Docker Run"
        steps:
          - download: current
            artifact: "${{ parameters.dockerImageName }}-images"

          - task: Docker@0
            displayName: 'Load image'
            inputs:
              action: 'Run a Docker command'
              customCommand: 'load --input $(Pipeline.Workspace)/${{ parameters.dockerImageName }}-images/${{ parameters.dockerImageName }}.tar'

          - task: Docker@2
            displayName: "Run container"
            inputs:
              command: run
              arguments: 
                ${{ parameters.dockerImageName }}:$(Build.BuildId)